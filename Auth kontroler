<?php

namespace App\Http\Controllers;
use App\Models\User;
use App\Models\Termin;
use App\Models\Raspored;
use App\Models\Prisutnost;
use Response;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class AuthController
{
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|max:255|email|unique:users',
            'password' => 'required|string|min:3'
        ]);


        if($validator->fails())
        {
            return Response::json(array(
                'code' => 400,
                'message' => $validator->errors(),
            ), 400);
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;
        return Response::json(array(
            'code'      =>  200,
            'message'   =>  "User ".$user->name." successfully registered.",
            'access_token' => $token, 
            'token_type' => 'Bearer'
        ), 200);
        //return response()->json(['data' => $user, 'access_token' => $token, 'token_type' => 'Bearer']);
    }



    public function login(Request $request)
    {
        if (!Auth::attempt($request->only('email', 'password'))) {
            return Response::json(array(
                'code'      =>  401,
                'message'   =>  "Unauthorized access."
            ), 401);
        }

        $user = User::where('email', $request['email'])->firstOrFail();

        $token = $user->createToken('auth_token')->plainTextToken;

        return Response::json(array(
            'code'      =>  200,
            'message'   =>  "User ".$user->name." logged in.",
            'access_token' => $token, 
            'role'=>auth()->user()->rola,
            'token_type' => 'Bearer',
            
        ), 200);
    }


    public function logout()
    {
        auth()->user()->tokens()->delete();
        return Response::json(array(
            'code'      =>  200,
            'message'   =>  "User ".auth()->user()->name." logged out.",
        ), 200);
    }

    public function maxstudenata()
    {
        return Response::json(array(
            'code'      =>  200,
            'max_stud'   =>  User::where('rola',0)->count()
        ), 200);
    }

    public function studenti($start,$cnt)
    {
        
        $slice = User::where('rola','0')->skip($start)->take($cnt)->get();
        return Response::json(array('studenti'=>$slice,'code'=>200),200);
    }

    public function statistikastudenata($start,$cnt)
    {
        
        $slice = User::where('rola','0')->skip($start)->take($cnt)->get();
        for($i=0;$i<count($slice);$i++)
        {
            if($slice[$i]->raspored_id!=null)
            {
            $slice[$i]->termina_prisutan = Prisutnost::where('student',$slice[$i]->id)->count();
            $slice[$i]->max_termina = Termin::whereIn('dan',
            Raspored::find(
                User::find($slice[$i]->id)->raspored_id)->dani->pluck('id')
                )->count();
            }
            else
            {
            $slice[$i]->termina_prisutan =0;
            $slice[$i]->max_termina =0;
            }

        }
        return Response::json(array('studenti'=>$slice,'code'=>200),200);
    }

    public function updateuserdata(Request $request)
    {
        $user = auth()->user();
        if($request->name!=null)
        {
            if($user->name!=$request->name && trim($request->name)!="")
            {
             $user->name=$request->name;
            }
        }
        if($request->password!=null)
        {
          if($user->password!=Hash::make($request->password) && trim($request->password)!="")
         {
               $user->password = Hash::make($request->password);
         }
        }

        if($request->email!=null)
        {
        if($user->email!=$request->email&& trim($request->email)!="")
        {
            $user->email=$request->email;
        }
        }
        $user->update();
        return Response::json(array(
                'code' => 200,
                'message' => "Uspesno promenjeni podaci profila",
            ), 200);
    }
}
